// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using PayhawkSDK.Client.Api.V3.Accounts.Item.AccountCodes;
using PayhawkSDK.Client.Api.V3.Accounts.Item.Amortizations;
using PayhawkSDK.Client.Api.V3.Accounts.Item.Cards;
using PayhawkSDK.Client.Api.V3.Accounts.Item.CustomFields;
using PayhawkSDK.Client.Api.V3.Accounts.Item.ExpenseCategories;
using PayhawkSDK.Client.Api.V3.Accounts.Item.Expenses;
using PayhawkSDK.Client.Api.V3.Accounts.Item.ExternalTeams;
using PayhawkSDK.Client.Api.V3.Accounts.Item.FundAccounts;
using PayhawkSDK.Client.Api.V3.Accounts.Item.Invoices;
using PayhawkSDK.Client.Api.V3.Accounts.Item.PurchaseOrders;
using PayhawkSDK.Client.Api.V3.Accounts.Item.Suppliers;
using PayhawkSDK.Client.Api.V3.Accounts.Item.SuppliersCustomFields;
using PayhawkSDK.Client.Api.V3.Accounts.Item.TaxRates;
using PayhawkSDK.Client.Api.V3.Accounts.Item.Teams;
using PayhawkSDK.Client.Api.V3.Accounts.Item.Users;
using PayhawkSDK.Client.Api.V3.Accounts.Item.Webhooks;
using PayhawkSDK.Client.Models;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace PayhawkSDK.Client.Api.V3.Accounts.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \api\v3\accounts\{accountId}
    /// </summary>
    public class WithAccountItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The accountCodes property</summary>
        public PayhawkSDK.Client.Api.V3.Accounts.Item.AccountCodes.AccountCodesRequestBuilder AccountCodes
        {
            get => new PayhawkSDK.Client.Api.V3.Accounts.Item.AccountCodes.AccountCodesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The amortizations property</summary>
        public PayhawkSDK.Client.Api.V3.Accounts.Item.Amortizations.AmortizationsRequestBuilder Amortizations
        {
            get => new PayhawkSDK.Client.Api.V3.Accounts.Item.Amortizations.AmortizationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The cards property</summary>
        public PayhawkSDK.Client.Api.V3.Accounts.Item.Cards.CardsRequestBuilder Cards
        {
            get => new PayhawkSDK.Client.Api.V3.Accounts.Item.Cards.CardsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The customFields property</summary>
        public PayhawkSDK.Client.Api.V3.Accounts.Item.CustomFields.CustomFieldsRequestBuilder CustomFields
        {
            get => new PayhawkSDK.Client.Api.V3.Accounts.Item.CustomFields.CustomFieldsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The expenseCategories property</summary>
        public PayhawkSDK.Client.Api.V3.Accounts.Item.ExpenseCategories.ExpenseCategoriesRequestBuilder ExpenseCategories
        {
            get => new PayhawkSDK.Client.Api.V3.Accounts.Item.ExpenseCategories.ExpenseCategoriesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The expenses property</summary>
        public PayhawkSDK.Client.Api.V3.Accounts.Item.Expenses.ExpensesRequestBuilder Expenses
        {
            get => new PayhawkSDK.Client.Api.V3.Accounts.Item.Expenses.ExpensesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The externalTeams property</summary>
        public PayhawkSDK.Client.Api.V3.Accounts.Item.ExternalTeams.ExternalTeamsRequestBuilder ExternalTeams
        {
            get => new PayhawkSDK.Client.Api.V3.Accounts.Item.ExternalTeams.ExternalTeamsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The fundAccounts property</summary>
        public PayhawkSDK.Client.Api.V3.Accounts.Item.FundAccounts.FundAccountsRequestBuilder FundAccounts
        {
            get => new PayhawkSDK.Client.Api.V3.Accounts.Item.FundAccounts.FundAccountsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The invoices property</summary>
        public PayhawkSDK.Client.Api.V3.Accounts.Item.Invoices.InvoicesRequestBuilder Invoices
        {
            get => new PayhawkSDK.Client.Api.V3.Accounts.Item.Invoices.InvoicesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The purchaseOrders property</summary>
        public PayhawkSDK.Client.Api.V3.Accounts.Item.PurchaseOrders.PurchaseOrdersRequestBuilder PurchaseOrders
        {
            get => new PayhawkSDK.Client.Api.V3.Accounts.Item.PurchaseOrders.PurchaseOrdersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The suppliers property</summary>
        public PayhawkSDK.Client.Api.V3.Accounts.Item.Suppliers.SuppliersRequestBuilder Suppliers
        {
            get => new PayhawkSDK.Client.Api.V3.Accounts.Item.Suppliers.SuppliersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The suppliersCustomFields property</summary>
        public PayhawkSDK.Client.Api.V3.Accounts.Item.SuppliersCustomFields.SuppliersCustomFieldsRequestBuilder SuppliersCustomFields
        {
            get => new PayhawkSDK.Client.Api.V3.Accounts.Item.SuppliersCustomFields.SuppliersCustomFieldsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The taxRates property</summary>
        public PayhawkSDK.Client.Api.V3.Accounts.Item.TaxRates.TaxRatesRequestBuilder TaxRates
        {
            get => new PayhawkSDK.Client.Api.V3.Accounts.Item.TaxRates.TaxRatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The teams property</summary>
        public PayhawkSDK.Client.Api.V3.Accounts.Item.Teams.TeamsRequestBuilder Teams
        {
            get => new PayhawkSDK.Client.Api.V3.Accounts.Item.Teams.TeamsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The users property</summary>
        public PayhawkSDK.Client.Api.V3.Accounts.Item.Users.UsersRequestBuilder Users
        {
            get => new PayhawkSDK.Client.Api.V3.Accounts.Item.Users.UsersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The webhooks property</summary>
        public PayhawkSDK.Client.Api.V3.Accounts.Item.Webhooks.WebhooksRequestBuilder Webhooks
        {
            get => new PayhawkSDK.Client.Api.V3.Accounts.Item.Webhooks.WebhooksRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="PayhawkSDK.Client.Api.V3.Accounts.Item.WithAccountItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithAccountItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/v3/accounts/{accountId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="PayhawkSDK.Client.Api.V3.Accounts.Item.WithAccountItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithAccountItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/api/v3/accounts/{accountId}", rawUrl)
        {
        }
        /// <summary>
        /// Returns an account by id
        /// </summary>
        /// <returns>A <see cref="PayhawkSDK.Client.Models.IAccount"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="PayhawkSDK.Client.Models.IError">When receiving a 400 status code</exception>
        /// <exception cref="PayhawkSDK.Client.Models.IError">When receiving a 401 status code</exception>
        /// <exception cref="PayhawkSDK.Client.Models.IError">When receiving a 403 status code</exception>
        /// <exception cref="PayhawkSDK.Client.Models.IError">When receiving a 404 status code</exception>
        /// <exception cref="PayhawkSDK.Client.Models.IError">When receiving a 429 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<PayhawkSDK.Client.Models.IAccount?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<PayhawkSDK.Client.Models.IAccount> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", PayhawkSDK.Client.Models.IError.CreateFromDiscriminatorValue },
                { "401", PayhawkSDK.Client.Models.IError.CreateFromDiscriminatorValue },
                { "403", PayhawkSDK.Client.Models.IError.CreateFromDiscriminatorValue },
                { "404", PayhawkSDK.Client.Models.IError.CreateFromDiscriminatorValue },
                { "429", PayhawkSDK.Client.Models.IError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<PayhawkSDK.Client.Models.IAccount>(requestInfo, PayhawkSDK.Client.Models.IAccount.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns an account by id
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="PayhawkSDK.Client.Api.V3.Accounts.Item.WithAccountItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public PayhawkSDK.Client.Api.V3.Accounts.Item.WithAccountItemRequestBuilder WithUrl(string rawUrl)
        {
            return new PayhawkSDK.Client.Api.V3.Accounts.Item.WithAccountItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class WithAccountItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
