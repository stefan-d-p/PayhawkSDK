// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace PayhawkSDK.Client.Models
{
    /// <summary>
    /// Supplier bank account details
    /// </summary>
    public class ISupplierBankAccount : IParsable
    {
        /// <summary>The name of the account holder</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountHolder { get; set; }
#nullable restore
#else
        public string AccountHolder { get; set; }
#endif
        /// <summary>Bank account number</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountNumber { get; set; }
#nullable restore
#else
        public string AccountNumber { get; set; }
#endif
        /// <summary>Bank account type</summary>
        public PayhawkSDK.Client.Models.ISupplierBankAccount_accountType? AccountType { get; set; }
        /// <summary>Account holder address</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Address { get; set; }
#nullable restore
#else
        public string Address { get; set; }
#endif
        /// <summary>Bank account SWIFT BIC number</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BicSwift { get; set; }
#nullable restore
#else
        public string BicSwift { get; set; }
#endif
        /// <summary>Account holder address city</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? City { get; set; }
#nullable restore
#else
        public string City { get; set; }
#endif
        /// <summary>Account holder address country code</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Country { get; set; }
#nullable restore
#else
        public string Country { get; set; }
#endif
        /// <summary>Bank account currency</summary>
        public PayhawkSDK.Client.Models.ISupplierBankAccount_currency? Currency { get; set; }
        /// <summary>Bank account IBAN</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Iban { get; set; }
#nullable restore
#else
        public string Iban { get; set; }
#endif
        /// <summary>The name of the payment scheme</summary>
        public PayhawkSDK.Client.Models.ISupplierBankAccount_paymentScheme? PaymentScheme { get; set; }
        /// <summary>Account holder address postal code</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PostalCode { get; set; }
#nullable restore
#else
        public string PostalCode { get; set; }
#endif
        /// <summary>Bank account routing number</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RoutingNumber { get; set; }
#nullable restore
#else
        public string RoutingNumber { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="PayhawkSDK.Client.Models.ISupplierBankAccount"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static PayhawkSDK.Client.Models.ISupplierBankAccount CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PayhawkSDK.Client.Models.ISupplierBankAccount();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accountHolder", n => { AccountHolder = n.GetStringValue(); } },
                { "accountNumber", n => { AccountNumber = n.GetStringValue(); } },
                { "accountType", n => { AccountType = n.GetEnumValue<PayhawkSDK.Client.Models.ISupplierBankAccount_accountType>(); } },
                { "address", n => { Address = n.GetStringValue(); } },
                { "bicSwift", n => { BicSwift = n.GetStringValue(); } },
                { "city", n => { City = n.GetStringValue(); } },
                { "country", n => { Country = n.GetStringValue(); } },
                { "currency", n => { Currency = n.GetEnumValue<PayhawkSDK.Client.Models.ISupplierBankAccount_currency>(); } },
                { "iban", n => { Iban = n.GetStringValue(); } },
                { "paymentScheme", n => { PaymentScheme = n.GetEnumValue<PayhawkSDK.Client.Models.ISupplierBankAccount_paymentScheme>(); } },
                { "postalCode", n => { PostalCode = n.GetStringValue(); } },
                { "routingNumber", n => { RoutingNumber = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("accountHolder", AccountHolder);
            writer.WriteStringValue("accountNumber", AccountNumber);
            writer.WriteEnumValue<PayhawkSDK.Client.Models.ISupplierBankAccount_accountType>("accountType", AccountType);
            writer.WriteStringValue("address", Address);
            writer.WriteStringValue("bicSwift", BicSwift);
            writer.WriteStringValue("city", City);
            writer.WriteStringValue("country", Country);
            writer.WriteEnumValue<PayhawkSDK.Client.Models.ISupplierBankAccount_currency>("currency", Currency);
            writer.WriteStringValue("iban", Iban);
            writer.WriteEnumValue<PayhawkSDK.Client.Models.ISupplierBankAccount_paymentScheme>("paymentScheme", PaymentScheme);
            writer.WriteStringValue("postalCode", PostalCode);
            writer.WriteStringValue("routingNumber", RoutingNumber);
        }
    }
}
