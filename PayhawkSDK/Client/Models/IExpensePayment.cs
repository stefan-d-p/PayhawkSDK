// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace PayhawkSDK.Client.Models
{
    /// <summary>
    /// Expense payment details
    /// </summary>
    public class IExpensePayment : IParsable
    {
        /// <summary>Amount of the payment</summary>
        public float? Amount { get; set; }
        /// <summary>Id of the card used for payment, empty for bank transfers</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CardId { get; set; }
#nullable restore
#else
        public string CardId { get; set; }
#endif
        /// <summary>Last 4 digits of the card used for payment, empty for bank transfers</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CardLastDigits { get; set; }
#nullable restore
#else
        public string CardLastDigits { get; set; }
#endif
        /// <summary>Currency of the payment</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Date of the payment</summary>
        public DateTimeOffset? Date { get; set; }
        /// <summary>Description of the payment that includes information for the merchant</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Array with ids of all related expenses</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ExpenseIds { get; set; }
#nullable restore
#else
        public List<string> ExpenseIds { get; set; }
#endif
        /// <summary>Details for an expense payment fees</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public PayhawkSDK.Client.Models.IExpensePaymentFees? Fees { get; set; }
#nullable restore
#else
        public PayhawkSDK.Client.Models.IExpensePaymentFees Fees { get; set; }
#endif
        /// <summary>Unique identifier of payment&apos;s fund account</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FundAccountId { get; set; }
#nullable restore
#else
        public string FundAccountId { get; set; }
#endif
        /// <summary>Fund account type, for example debit or credit</summary>
        public PayhawkSDK.Client.Models.IExpensePayment_fundAccountType? FundAccountType { get; set; }
        /// <summary>Currency exchange rate of the payment</summary>
        public float? FxRate { get; set; }
        /// <summary>Unique identifier of the payment</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Original amount of the payment</summary>
        public float? OriginalAmount { get; set; }
        /// <summary>Original currency of the payment</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalCurrency { get; set; }
#nullable restore
#else
        public string OriginalCurrency { get; set; }
#endif
        /// <summary>Status of the payment</summary>
        public PayhawkSDK.Client.Models.IExpensePayment_status? Status { get; set; }
        /// <summary>Type of the payment</summary>
        public PayhawkSDK.Client.Models.IExpensePayment_type? Type { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="PayhawkSDK.Client.Models.IExpensePayment"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static PayhawkSDK.Client.Models.IExpensePayment CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PayhawkSDK.Client.Models.IExpensePayment();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetFloatValue(); } },
                { "cardId", n => { CardId = n.GetStringValue(); } },
                { "cardLastDigits", n => { CardLastDigits = n.GetStringValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "date", n => { Date = n.GetDateTimeOffsetValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "expenseIds", n => { ExpenseIds = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                { "fees", n => { Fees = n.GetObjectValue<PayhawkSDK.Client.Models.IExpensePaymentFees>(PayhawkSDK.Client.Models.IExpensePaymentFees.CreateFromDiscriminatorValue); } },
                { "fundAccountId", n => { FundAccountId = n.GetStringValue(); } },
                { "fundAccountType", n => { FundAccountType = n.GetEnumValue<PayhawkSDK.Client.Models.IExpensePayment_fundAccountType>(); } },
                { "fxRate", n => { FxRate = n.GetFloatValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "originalAmount", n => { OriginalAmount = n.GetFloatValue(); } },
                { "originalCurrency", n => { OriginalCurrency = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<PayhawkSDK.Client.Models.IExpensePayment_status>(); } },
                { "type", n => { Type = n.GetEnumValue<PayhawkSDK.Client.Models.IExpensePayment_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteFloatValue("amount", Amount);
            writer.WriteStringValue("cardId", CardId);
            writer.WriteStringValue("cardLastDigits", CardLastDigits);
            writer.WriteStringValue("currency", Currency);
            writer.WriteDateTimeOffsetValue("date", Date);
            writer.WriteStringValue("description", Description);
            writer.WriteCollectionOfPrimitiveValues<string>("expenseIds", ExpenseIds);
            writer.WriteObjectValue<PayhawkSDK.Client.Models.IExpensePaymentFees>("fees", Fees);
            writer.WriteStringValue("fundAccountId", FundAccountId);
            writer.WriteEnumValue<PayhawkSDK.Client.Models.IExpensePayment_fundAccountType>("fundAccountType", FundAccountType);
            writer.WriteFloatValue("fxRate", FxRate);
            writer.WriteStringValue("id", Id);
            writer.WriteFloatValue("originalAmount", OriginalAmount);
            writer.WriteStringValue("originalCurrency", OriginalCurrency);
            writer.WriteEnumValue<PayhawkSDK.Client.Models.IExpensePayment_status>("status", Status);
            writer.WriteEnumValue<PayhawkSDK.Client.Models.IExpensePayment_type>("type", Type);
        }
    }
}
