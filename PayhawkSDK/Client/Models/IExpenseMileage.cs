// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace PayhawkSDK.Client.Models
{
    /// <summary>
    /// Mileage information
    /// </summary>
    public class IExpenseMileage : IParsable
    {
        /// <summary>The applied rates for this trip</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public PayhawkSDK.Client.Models.IExpenseMileageRate? AppliedRates { get; set; }
#nullable restore
#else
        public PayhawkSDK.Client.Models.IExpenseMileageRate AppliedRates { get; set; }
#endif
        /// <summary>The distance for this trip</summary>
        public float? Distance { get; set; }
        /// <summary>The unit of distance for this trip</summary>
        public PayhawkSDK.Client.Models.IExpenseMileage_distanceUnit? DistanceUnit { get; set; }
        /// <summary>The edited distance for this trip</summary>
        public float? EditedDistance { get; set; }
        /// <summary>Is this a round trip</summary>
        public bool? IsRoundTrip { get; set; }
        /// <summary>The route stops for this Mileage expense</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PayhawkSDK.Client.Models.IExpenseMileageStop>? RouteStops { get; set; }
#nullable restore
#else
        public List<PayhawkSDK.Client.Models.IExpenseMileageStop> RouteStops { get; set; }
#endif
        /// <summary>The vehicle type for this trip. E.g. car or bike</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VehicleType { get; set; }
#nullable restore
#else
        public string VehicleType { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="PayhawkSDK.Client.Models.IExpenseMileage"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static PayhawkSDK.Client.Models.IExpenseMileage CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PayhawkSDK.Client.Models.IExpenseMileage();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "appliedRates", n => { AppliedRates = n.GetObjectValue<PayhawkSDK.Client.Models.IExpenseMileageRate>(PayhawkSDK.Client.Models.IExpenseMileageRate.CreateFromDiscriminatorValue); } },
                { "distance", n => { Distance = n.GetFloatValue(); } },
                { "distanceUnit", n => { DistanceUnit = n.GetEnumValue<PayhawkSDK.Client.Models.IExpenseMileage_distanceUnit>(); } },
                { "editedDistance", n => { EditedDistance = n.GetFloatValue(); } },
                { "isRoundTrip", n => { IsRoundTrip = n.GetBoolValue(); } },
                { "routeStops", n => { RouteStops = n.GetCollectionOfObjectValues<PayhawkSDK.Client.Models.IExpenseMileageStop>(PayhawkSDK.Client.Models.IExpenseMileageStop.CreateFromDiscriminatorValue)?.ToList(); } },
                { "vehicleType", n => { VehicleType = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<PayhawkSDK.Client.Models.IExpenseMileageRate>("appliedRates", AppliedRates);
            writer.WriteFloatValue("distance", Distance);
            writer.WriteEnumValue<PayhawkSDK.Client.Models.IExpenseMileage_distanceUnit>("distanceUnit", DistanceUnit);
            writer.WriteFloatValue("editedDistance", EditedDistance);
            writer.WriteBoolValue("isRoundTrip", IsRoundTrip);
            writer.WriteCollectionOfObjectValues<PayhawkSDK.Client.Models.IExpenseMileageStop>("routeStops", RouteStops);
            writer.WriteStringValue("vehicleType", VehicleType);
        }
    }
}
