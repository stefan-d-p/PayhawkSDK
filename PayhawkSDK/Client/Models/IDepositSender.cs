// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace PayhawkSDK.Client.Models
{
    /// <summary>
    /// Sender of a fund account deposit
    /// </summary>
    public class IDepositSender : IParsable
    {
        /// <summary>Account identifier of the sender</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountNumber { get; set; }
#nullable restore
#else
        public string AccountNumber { get; set; }
#endif
        /// <summary>IBAN of the sender</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Iban { get; set; }
#nullable restore
#else
        public string Iban { get; set; }
#endif
        /// <summary>Name of the sender</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Sort code of sender&apos;s bank</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SortCode { get; set; }
#nullable restore
#else
        public string SortCode { get; set; }
#endif
        /// <summary>Swift code of sender&apos;s bank</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SwiftCode { get; set; }
#nullable restore
#else
        public string SwiftCode { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="PayhawkSDK.Client.Models.IDepositSender"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static PayhawkSDK.Client.Models.IDepositSender CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PayhawkSDK.Client.Models.IDepositSender();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accountNumber", n => { AccountNumber = n.GetStringValue(); } },
                { "iban", n => { Iban = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "sortCode", n => { SortCode = n.GetStringValue(); } },
                { "swiftCode", n => { SwiftCode = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("accountNumber", AccountNumber);
            writer.WriteStringValue("iban", Iban);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("sortCode", SortCode);
            writer.WriteStringValue("swiftCode", SwiftCode);
        }
    }
}
