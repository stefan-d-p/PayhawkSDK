// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace PayhawkSDK.Client.Models
{
    /// <summary>
    /// Invoice upload request payload consisting of a file and additional invoice metadata
    /// </summary>
    public class INewInvoiceRequest : IParsable
    {
        /// <summary>Currency of the invoice</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Document issue date</summary>
        public DateTimeOffset? DocumentDate { get; set; }
        /// <summary>Document number</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DocumentNumber { get; set; }
#nullable restore
#else
        public string DocumentNumber { get; set; }
#endif
        /// <summary>Invoice document to upload</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? File { get; set; }
#nullable restore
#else
        public string File { get; set; }
#endif
        /// <summary>Unique identifier of the invoice</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Array of `INewInvoiceItem` objects in a JSON-stringified form, suitable for form-data request</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Items { get; set; }
#nullable restore
#else
        public string Items { get; set; }
#endif
        /// <summary>Payment date of the invoice</summary>
        public DateTimeOffset? PaidAt { get; set; }
        /// <summary>Provider of the invoice</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Provider { get; set; }
#nullable restore
#else
        public string Provider { get; set; }
#endif
        /// <summary>Additional reference of the invoice</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Reference { get; set; }
#nullable restore
#else
        public string Reference { get; set; }
#endif
        /// <summary>Country of invoice&apos;s supplier</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SupplierCountry { get; set; }
#nullable restore
#else
        public string SupplierCountry { get; set; }
#endif
        /// <summary>Supplier of the invoice</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SupplierName { get; set; }
#nullable restore
#else
        public string SupplierName { get; set; }
#endif
        /// <summary>VAT number of invoice&apos;s supplier</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SupplierVat { get; set; }
#nullable restore
#else
        public string SupplierVat { get; set; }
#endif
        /// <summary>Tax amount of the invoice</summary>
        public float? TaxAmount { get; set; }
        /// <summary>Total amount of the invoice</summary>
        public float? TotalAmount { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="PayhawkSDK.Client.Models.INewInvoiceRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static PayhawkSDK.Client.Models.INewInvoiceRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PayhawkSDK.Client.Models.INewInvoiceRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "documentDate", n => { DocumentDate = n.GetDateTimeOffsetValue(); } },
                { "documentNumber", n => { DocumentNumber = n.GetStringValue(); } },
                { "file", n => { File = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "items", n => { Items = n.GetStringValue(); } },
                { "paidAt", n => { PaidAt = n.GetDateTimeOffsetValue(); } },
                { "provider", n => { Provider = n.GetStringValue(); } },
                { "reference", n => { Reference = n.GetStringValue(); } },
                { "supplierCountry", n => { SupplierCountry = n.GetStringValue(); } },
                { "supplierName", n => { SupplierName = n.GetStringValue(); } },
                { "supplierVat", n => { SupplierVat = n.GetStringValue(); } },
                { "taxAmount", n => { TaxAmount = n.GetFloatValue(); } },
                { "totalAmount", n => { TotalAmount = n.GetFloatValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("currency", Currency);
            writer.WriteDateTimeOffsetValue("documentDate", DocumentDate);
            writer.WriteStringValue("documentNumber", DocumentNumber);
            writer.WriteStringValue("file", File);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("items", Items);
            writer.WriteDateTimeOffsetValue("paidAt", PaidAt);
            writer.WriteStringValue("provider", Provider);
            writer.WriteStringValue("reference", Reference);
            writer.WriteStringValue("supplierCountry", SupplierCountry);
            writer.WriteStringValue("supplierName", SupplierName);
            writer.WriteStringValue("supplierVat", SupplierVat);
            writer.WriteFloatValue("taxAmount", TaxAmount);
            writer.WriteFloatValue("totalAmount", TotalAmount);
        }
    }
}
