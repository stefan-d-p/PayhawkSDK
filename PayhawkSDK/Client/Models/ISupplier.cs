// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace PayhawkSDK.Client.Models
{
    /// <summary>
    /// Supplier details
    /// </summary>
    public class ISupplier : IParsable
    {
        /// <summary>Address of the supplier company</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Address { get; set; }
#nullable restore
#else
        public string Address { get; set; }
#endif
        /// <summary>Supplier bank account details (Currently only a single bank account per supplier is supported)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PayhawkSDK.Client.Models.ISupplierBankAccount>? BankAccounts { get; set; }
#nullable restore
#else
        public List<PayhawkSDK.Client.Models.ISupplierBankAccount> BankAccounts { get; set; }
#endif
        /// <summary>Contact email for the supplier</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContactEmail { get; set; }
#nullable restore
#else
        public string ContactEmail { get; set; }
#endif
        /// <summary>Contact name for the supplier</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContactName { get; set; }
#nullable restore
#else
        public string ContactName { get; set; }
#endif
        /// <summary>Contact phone the supplier</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContactPhone { get; set; }
#nullable restore
#else
        public string ContactPhone { get; set; }
#endif
        /// <summary>Short code of supplier&apos;s country</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CountryCode { get; set; }
#nullable restore
#else
        public string CountryCode { get; set; }
#endif
        /// <summary>A list of supplier&apos;s custom field</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PayhawkSDK.Client.Models.ISupplierCustomFieldData>? CustomFields { get; set; }
#nullable restore
#else
        public List<PayhawkSDK.Client.Models.ISupplierCustomFieldData> CustomFields { get; set; }
#endif
        /// <summary>Supplier&apos;s ID in the external system</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalId { get; set; }
#nullable restore
#else
        public string ExternalId { get; set; }
#endif
        /// <summary>Identifier of the external system the supplier originates from</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalSource { get; set; }
#nullable restore
#else
        public string ExternalSource { get; set; }
#endif
        /// <summary>Unique identifier of the supplier</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Name of the supplier company</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The supplier current status</summary>
        public PayhawkSDK.Client.Models.ISupplier_status? Status { get; set; }
        /// <summary>Tax ID of the supplier company</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TaxId { get; set; }
#nullable restore
#else
        public string TaxId { get; set; }
#endif
        /// <summary>Unified identification code of the supplier company</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Uic { get; set; }
#nullable restore
#else
        public string Uic { get; set; }
#endif
        /// <summary>Tax number of the supplier company</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Vat { get; set; }
#nullable restore
#else
        public string Vat { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="PayhawkSDK.Client.Models.ISupplier"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static PayhawkSDK.Client.Models.ISupplier CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PayhawkSDK.Client.Models.ISupplier();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "address", n => { Address = n.GetStringValue(); } },
                { "bankAccounts", n => { BankAccounts = n.GetCollectionOfObjectValues<PayhawkSDK.Client.Models.ISupplierBankAccount>(PayhawkSDK.Client.Models.ISupplierBankAccount.CreateFromDiscriminatorValue)?.ToList(); } },
                { "contactEmail", n => { ContactEmail = n.GetStringValue(); } },
                { "contactName", n => { ContactName = n.GetStringValue(); } },
                { "contactPhone", n => { ContactPhone = n.GetStringValue(); } },
                { "countryCode", n => { CountryCode = n.GetStringValue(); } },
                { "customFields", n => { CustomFields = n.GetCollectionOfObjectValues<PayhawkSDK.Client.Models.ISupplierCustomFieldData>(PayhawkSDK.Client.Models.ISupplierCustomFieldData.CreateFromDiscriminatorValue)?.ToList(); } },
                { "externalId", n => { ExternalId = n.GetStringValue(); } },
                { "externalSource", n => { ExternalSource = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<PayhawkSDK.Client.Models.ISupplier_status>(); } },
                { "taxId", n => { TaxId = n.GetStringValue(); } },
                { "uic", n => { Uic = n.GetStringValue(); } },
                { "vat", n => { Vat = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("address", Address);
            writer.WriteCollectionOfObjectValues<PayhawkSDK.Client.Models.ISupplierBankAccount>("bankAccounts", BankAccounts);
            writer.WriteStringValue("contactEmail", ContactEmail);
            writer.WriteStringValue("contactName", ContactName);
            writer.WriteStringValue("contactPhone", ContactPhone);
            writer.WriteStringValue("countryCode", CountryCode);
            writer.WriteCollectionOfObjectValues<PayhawkSDK.Client.Models.ISupplierCustomFieldData>("customFields", CustomFields);
            writer.WriteStringValue("externalId", ExternalId);
            writer.WriteStringValue("externalSource", ExternalSource);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteEnumValue<PayhawkSDK.Client.Models.ISupplier_status>("status", Status);
            writer.WriteStringValue("taxId", TaxId);
            writer.WriteStringValue("uic", Uic);
            writer.WriteStringValue("vat", Vat);
        }
    }
}
