// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace PayhawkSDK.Client.Models
{
    /// <summary>
    /// Expense Per Diem day object
    /// </summary>
    public class IExpensePerDiemDay : IParsable
    {
        /// <summary>Amount for the given day</summary>
        public float? Amount { get; set; }
        /// <summary>The rules applied to the given day</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PayhawkSDK.Client.Models.IExpensePerDiemAppliedRule>? AppliedRules { get; set; }
#nullable restore
#else
        public List<PayhawkSDK.Client.Models.IExpensePerDiemAppliedRule> AppliedRules { get; set; }
#endif
        /// <summary>City</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? City { get; set; }
#nullable restore
#else
        public string City { get; set; }
#endif
        /// <summary>Country Code</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CountryCode { get; set; }
#nullable restore
#else
        public string CountryCode { get; set; }
#endif
        /// <summary>Currency of the given amount</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Date</summary>
        public DateTimeOffset? Date { get; set; }
        /// <summary>Timezone of the given city</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Timezone { get; set; }
#nullable restore
#else
        public string Timezone { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="PayhawkSDK.Client.Models.IExpensePerDiemDay"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static PayhawkSDK.Client.Models.IExpensePerDiemDay CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PayhawkSDK.Client.Models.IExpensePerDiemDay();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetFloatValue(); } },
                { "appliedRules", n => { AppliedRules = n.GetCollectionOfObjectValues<PayhawkSDK.Client.Models.IExpensePerDiemAppliedRule>(PayhawkSDK.Client.Models.IExpensePerDiemAppliedRule.CreateFromDiscriminatorValue)?.ToList(); } },
                { "city", n => { City = n.GetStringValue(); } },
                { "countryCode", n => { CountryCode = n.GetStringValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "date", n => { Date = n.GetDateTimeOffsetValue(); } },
                { "timezone", n => { Timezone = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteFloatValue("amount", Amount);
            writer.WriteCollectionOfObjectValues<PayhawkSDK.Client.Models.IExpensePerDiemAppliedRule>("appliedRules", AppliedRules);
            writer.WriteStringValue("city", City);
            writer.WriteStringValue("countryCode", CountryCode);
            writer.WriteStringValue("currency", Currency);
            writer.WriteDateTimeOffsetValue("date", Date);
            writer.WriteStringValue("timezone", Timezone);
        }
    }
}
