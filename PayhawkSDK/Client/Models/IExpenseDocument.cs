// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace PayhawkSDK.Client.Models
{
    /// <summary>
    /// Document information for the expense
    /// </summary>
    public class IExpenseDocument : IParsable
    {
        /// <summary>Document issue date</summary>
        public DateTimeOffset? DocumentDate { get; set; }
        /// <summary>Unique identifier of the document</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DocumentNumber { get; set; }
#nullable restore
#else
        public string DocumentNumber { get; set; }
#endif
        /// <summary>Document type</summary>
        public PayhawkSDK.Client.Models.IExpenseDocument_documentType? DocumentType { get; set; }
        /// <summary>Payment due date</summary>
        public DateTimeOffset? DueDate { get; set; }
        /// <summary>Array of files attached to this document</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PayhawkSDK.Client.Models.IFile>? Files { get; set; }
#nullable restore
#else
        public List<PayhawkSDK.Client.Models.IFile> Files { get; set; }
#endif
        /// <summary>Date indicating the service period of the document</summary>
        public DateTimeOffset? ServiceDate { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="PayhawkSDK.Client.Models.IExpenseDocument"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static PayhawkSDK.Client.Models.IExpenseDocument CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PayhawkSDK.Client.Models.IExpenseDocument();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "documentDate", n => { DocumentDate = n.GetDateTimeOffsetValue(); } },
                { "documentNumber", n => { DocumentNumber = n.GetStringValue(); } },
                { "documentType", n => { DocumentType = n.GetEnumValue<PayhawkSDK.Client.Models.IExpenseDocument_documentType>(); } },
                { "dueDate", n => { DueDate = n.GetDateTimeOffsetValue(); } },
                { "files", n => { Files = n.GetCollectionOfObjectValues<PayhawkSDK.Client.Models.IFile>(PayhawkSDK.Client.Models.IFile.CreateFromDiscriminatorValue)?.ToList(); } },
                { "serviceDate", n => { ServiceDate = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("documentDate", DocumentDate);
            writer.WriteStringValue("documentNumber", DocumentNumber);
            writer.WriteEnumValue<PayhawkSDK.Client.Models.IExpenseDocument_documentType>("documentType", DocumentType);
            writer.WriteDateTimeOffsetValue("dueDate", DueDate);
            writer.WriteCollectionOfObjectValues<PayhawkSDK.Client.Models.IFile>("files", Files);
            writer.WriteDateTimeOffsetValue("serviceDate", ServiceDate);
        }
    }
}
