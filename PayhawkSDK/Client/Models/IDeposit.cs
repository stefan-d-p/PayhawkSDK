// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace PayhawkSDK.Client.Models
{
    /// <summary>
    /// Deposit in a fund account
    /// </summary>
    public class IDeposit : IParsable
    {
        /// <summary>Amount of the deposit</summary>
        public float? Amount { get; set; }
        /// <summary>Currency of the deposit</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Date of the deposit</summary>
        public DateTimeOffset? Date { get; set; }
        /// <summary>Description of the deposit</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Identifier of the fund account for the deposit</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FundAccountId { get; set; }
#nullable restore
#else
        public string FundAccountId { get; set; }
#endif
        /// <summary>Type of the fund account for the deposit</summary>
        public PayhawkSDK.Client.Models.IDeposit_fundAccountType? FundAccountType { get; set; }
        /// <summary>Unique identifier of the deposit</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Sender of a fund account deposit</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public PayhawkSDK.Client.Models.IDepositSender? Sender { get; set; }
#nullable restore
#else
        public PayhawkSDK.Client.Models.IDepositSender Sender { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="PayhawkSDK.Client.Models.IDeposit"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static PayhawkSDK.Client.Models.IDeposit CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PayhawkSDK.Client.Models.IDeposit();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetFloatValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "date", n => { Date = n.GetDateTimeOffsetValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "fundAccountId", n => { FundAccountId = n.GetStringValue(); } },
                { "fundAccountType", n => { FundAccountType = n.GetEnumValue<PayhawkSDK.Client.Models.IDeposit_fundAccountType>(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "sender", n => { Sender = n.GetObjectValue<PayhawkSDK.Client.Models.IDepositSender>(PayhawkSDK.Client.Models.IDepositSender.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteFloatValue("amount", Amount);
            writer.WriteStringValue("currency", Currency);
            writer.WriteDateTimeOffsetValue("date", Date);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("fundAccountId", FundAccountId);
            writer.WriteEnumValue<PayhawkSDK.Client.Models.IDeposit_fundAccountType>("fundAccountType", FundAccountType);
            writer.WriteStringValue("id", Id);
            writer.WriteObjectValue<PayhawkSDK.Client.Models.IDepositSender>("sender", Sender);
        }
    }
}
